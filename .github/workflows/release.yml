name: release

on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry >=1.0.0
        poetry config virtualenvs.in-project true
    - name: Set up cache
      uses: actions/cache@v1
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry install
    - name: Generate OpenAPI schema definition
      env:
        TELEGRAM_BOT_API_KEY: '1:a'
        TELEGRAM_BOT_WEBHOOK_ENDPOINT: ''
        TELEGRAM_BOT_WEBHOOK_SECRET: ''
        ORG_CHAT_ID: '1'
      run: |
        poetry run python -c "from ppm_telegram_bot.api import app; import json; schema = app.openapi(); json.dump(schema, open('openapi.json', 'w'))"
    - name: Generate client
      id: generate_client
      run: |
        git clone https://github.com/b0g3r/fastapi_client
        echo "::set-output name=poetry_version::$(poetry version | cut -d ' ' -f 2)"
        ./fastapi_client/scripts/generate.sh  \
        -i openapi.json \
        -p ppm_telegram_bot_client \
        -o . \
        --with-meta \
        -- \
        --additional-properties=packageVersion=$(poetry version | cut -d ' ' -f 2) || true
    - name: Publish to PyPI
      run: |
        cd ppm_telegram_bot_client
        poetry run python setup.py sdist
        poetry run twine upload --username __token__ --password ${{ secrets.PYPI_PASSWORD }} dist/*
    - name: Create GitHub release
      uses: actions/create-release@latest
      with:
        tag_name: ${{ steps.generate_client.outputs.poetry_version }}
        release_name: Release ${{ steps.generate_client.outputs.poetry_version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
